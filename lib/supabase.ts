import { createClient, SupabaseClient } from '@supabase/supabase-js';

// UWAGA: Zastąp poniższe wartości rzeczywistymi danymi z Twojego projektu Supabase.
// Możesz je znaleźć w panelu administracyjnym Supabase w sekcji "Project Settings" -> "API".

// FIX: Explicitly type as string to avoid literal type comparison errors below.
const supabaseUrl: string = 'https://pihkjexqujborgqcrqly.supabase.co'; // Wklej tutaj swój Supabase URL
const supabaseKey: string = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBpaGtqZXhxdWpib3JncWNycWx5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwODA2MTMsImV4cCI6MjA3NDY1NjYxM30.lz5D8wV-wJYU1Qy8qV6LsHZzJU3UaUtfu6k3Vp6a_VA'; // Wklej tutaj swój klucz anonimowy (publiczny)

let supabase: SupabaseClient | null = null;

const isConfigured = supabaseUrl !== 'YOUR_SUPABASE_URL' && supabaseKey !== 'YOUR_SUPABASE_ANON_KEY' && supabaseUrl && supabaseKey;


if (isConfigured) {
  supabase = createClient(supabaseUrl, supabaseKey);
} else {
    console.warn(`
    ********************************************************************************
    * UWAGA: Klient Supabase nie jest skonfigurowany.                               *
    *                                                                              *
    * Otwórz plik 'lib/supabase.ts' i zastąp wartości 'YOUR_SUPABASE_URL'            *
    * oraz 'YOUR_SUPABASE_ANON_KEY' swoimi kluczami API projektu Supabase.           *
    * Bez tego zapisywanie e-maili nie będzie działać.                             *
    ********************************************************************************
  `);
}

export { supabase };

// Upewnij się, że masz tabelę o nazwie `subscribers` w swojej bazie danych Supabase.
// Możesz ją stworzyć za pomocą poniższego polecenia SQL w edytorze SQL Supabase:
/*
  CREATE TABLE public.subscribers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email text NOT NULL UNIQUE,
    created_at timestamp with time zone DEFAULT now() NOT NULL
  );

  -- Włącz RLS (Row Level Security) dla tabeli
  ALTER TABLE public.subscribers ENABLE ROW LEVEL SECURITY;

  -- Stwórz politykę, która pozwala na publiczny zapis (INSERT) do tabeli
  CREATE POLICY "Public users can subscribe" ON public.subscribers
    FOR INSERT WITH CHECK (true);
  
  -- Stwórz politykę, która pozwala zalogowanym użytkownikom na odczyt
  CREATE POLICY "Authenticated users can view subscribers" ON public.subscribers
    FOR SELECT USING (auth.role() = 'authenticated');

  -- Stwórz politykę, która pozwala zalogowanym użytkownikom na usuwanie
  CREATE POLICY "Authenticated users can delete subscribers" ON public.subscribers
    FOR DELETE USING (auth.role() = 'authenticated');
*/

// Upewnij się, że masz tabelę o nazwie `programs` w swojej bazie danych Supabase.
// Możesz ją stworzyć za pomocą poniższego polecenia SQL w edytorze SQL Supabase:
/*
  CREATE TABLE public.programs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name jsonb NOT NULL,
    description jsonb NOT NULL,
    url text NOT NULL,
    icon text NOT NULL,
    is_new boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
  );

  -- Włącz RLS (Row Level Security) dla tabeli
  ALTER TABLE public.programs ENABLE ROW LEVEL SECURITY;

  -- Stwórz politykę, która pozwala każdemu na odczyt aplikacji
  CREATE POLICY "Public can view programs" ON public.programs
    FOR SELECT USING (true);
  
  -- Stwórz politykę, która pozwala zalogowanym użytkownikom na dodawanie aplikacji
  CREATE POLICY "Authenticated users can insert programs" ON public.programs
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

  -- Stwórz politykę, która pozwala zalogowanym użytkownikom na aktualizację aplikacji
  CREATE POLICY "Authenticated users can update programs" ON public.programs
    FOR UPDATE USING (auth.role() = 'authenticated') WITH CHECK (auth.role() = 'authenticated');

  -- Stwórz politykę, która pozwala zalogowanym użytkownikom na usuwanie aplikacji
  CREATE POLICY "Authenticated users can delete programs" ON public.programs
    FOR DELETE USING (auth.role() = 'authenticated');
*/